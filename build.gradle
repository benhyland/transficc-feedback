buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

plugins {
    id "com.moowork.node" version "1.2.0"
    id "com.moowork.gulp" version "1.2.0"
}

repositories {
    jcenter()
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.moowork.node'
apply plugin: 'com.moowork.gulp'
apply plugin: 'idea'

idea {
    module {
        excludeDirs += file('node_modules')
    }
}

node {
    download = true
    version = '6.9.1'
}

gulp {
    // Set the directory where gulpfile.js should be found
    workDir = file("${project.projectDir}")

    // Whether colors should output on the terminal
    colors = true

    // Whether output from Gulp should be buffered - useful when running tasks in parallel
    bufferOutput = false
}

//gulp_build.dependsOn 'installGulp'
gulp_build.dependsOn 'npmInstall'

// WARNING: Input and output paths are also present in the gulpfile. Keep them in sync.
gulp_build.inputs.dir 'src/main/webapp'
gulp_build.inputs.dir 'src/main/resources'
gulp_build.inputs.dir 'node_modules'
gulp_build.outputs.dir 'build/resources/main/static'

npmInstall.inputs.file 'package.json'
npmInstall.outputs.dir 'node_modules'

compileJava.dependsOn 'gulp_build'

shadowJar {
    enabled = true
    manifest.attributes('Main-Class': 'com.transficc.tools.feedback.FeedbackMain')
}


def defineLocalLibs()
{
    String vertxVersion = '3.4.1'
    String nettyVersion = '4.1.17.Final'
    String mockitoVersion = '2.8.9'
    String byteBuddyVersion = '1.6.14'

    Map libs = [
            'vertx'               : ["io.vertx:vertx-web:$vertxVersion", "io.vertx:vertx-auth-common:$vertxVersion", "io.vertx:vertx-core:$vertxVersion", "io.vertx:vertx-web-templ-handlebars:$vertxVersion"],
            'jackson'             : ['com.fasterxml.jackson.core:jackson-core:2.7.4', 'com.fasterxml.jackson.core:jackson-databind:2.7.4', 'com.fasterxml.jackson.core:jackson-annotations:2.7.4'],
            'slf4j-api'             : 'org.slf4j:slf4j-api:1.7.24',
            'commons-codec'       : 'commons-codec:commons-codec:1.9',
            'commons-logging'     : 'commons-logging:commons-logging:1.2',
            'findbugs-annotations': 'com.google.code.findbugs:annotations:3.0.1',
            'flyway-core'         : 'org.flywaydb:flyway-core:4.0',
            'handlebars'          : 'com.github.jknack:handlebars:4.0.3',
            'h2database'          : 'com.h2database:h2:1.4.192',
            'jenkins-client'      : 'com.offbytwo.jenkins:jenkins-client:0.3.7',
            'jcip-annotations'    : 'net.jcip:jcip-annotations:1.0',
            'netty'               : ["io.netty:netty-common:$nettyVersion", "io.netty:netty-resolver:$nettyVersion", "io.netty:netty-resolver-dns:$nettyVersion", "io.netty:netty-buffer:$nettyVersion",
                                     "io.netty:netty-transport:$nettyVersion", "io.netty:netty-handler:$nettyVersion", "io.netty:netty-codec:$nettyVersion", "io.netty:netty-codec-http:$nettyVersion",
                                     "io.netty:netty-codec-http:$nettyVersion", "io.netty:netty-codec-http2:$nettyVersion", "io.netty:netty-codec-dns:$nettyVersion"],
            'antlr4-runtime'      : 'org.antlr:antlr4-runtime:4.5.1-1',
            'commons-lang3'       : 'org.apache.commons:commons-lang3:3.1',
            'httpclient'          : 'org.apache.httpcomponents:httpclient:4.5.1',
            'httpcore'            : 'org.apache.httpcomponents:httpcore:4.4.3',
            'guava'               : 'com.google.guava:guava:19.0',
            'dom4j'               : 'org.dom4j:dom4j:2.0.0',
            'spring-beans'        : 'org.springframework:spring-beans:4.2.5.RELEASE',
            'spring-core'         : 'org.springframework:spring-core:4.2.5.RELEASE',
            'spring-jdbc'         : 'org.springframework:spring-jdbc:4.2.5.RELEASE',
            'spring-tx'           : 'org.springframework:spring-tx:4.2.5.RELEASE',
            'tf-test'             : ['junit:junit:4.12', 'org.hamcrest:hamcrest-core:1.3', "org.mockito:mockito-core:$mockitoVersion", "org.mockito:mockito-inline:$mockitoVersion", "net.bytebuddy:byte-buddy:$byteBuddyVersion", "net.bytebuddy:byte-buddy-agent:$byteBuddyVersion", 'org.objenesis:objenesis:2.5']
    ]

    return libs
}


def libs = rootProject.ext.has('libs') ? rootProject.ext.libs : defineLocalLibs()

dependencies {
    if (rootProject.ext.has('libs'))
    {
        compile project(':transficc-functionality')
        compile project(':portals')
    }
    else
    {
        compile 'com.transficc:transficc-functionality:1.0.1'
        compile 'com.transficc:portal-value-objects:1.1.0'
    }
    compile libs.'commons-codec'
    compile libs.'commons-logging'
    compile libs.'findbugs-annotations'
    compile libs.'flyway-core'
    compile libs.'handlebars'
    compile libs.'h2database'
    compile libs.'jackson'
    compile libs.'jenkins-client'
    compile libs.'jcip-annotations'
    compile libs.'slf4j-api'
    compile libs.'netty'
    compile libs.'spring-jdbc'
    compile libs.'spring-beans'
    compile libs.'spring-core'
    compile libs.'spring-tx'
    compile libs.'vertx'
    runtime libs.'antlr4-runtime'
    runtime libs.'commons-lang3'
    runtime libs.'httpclient'
    runtime libs.'httpcore'
    runtime libs.'guava'
    runtime libs.'dom4j'
    testCompile libs.'tf-test'
}